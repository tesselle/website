---
title: "Archaeological seriation"
description: "Correspondence analysis based seriation with `kairos`, `tabula` and `dimensio`."
categories:
  - count data
  - correspondence analysis
  - seriation
author:
  - name: Nicolas Frerebeau
    affiliation: Arch√©osciences Bordeaux (UMR 6034)
    affiliation_url: https://www.archeosciences-bordeaux.fr
    orcid: 0000-0001-5759-4944
date: 2023-08-22
bibliography: references.bib
image: thumbnail.png
---

# Introduction

Matrix seriation in archaeology consists of chronologically ordering a set of archaeological contexts based on the distribution of different characteristics (artifact types). This process involves finding an arrangement by permuting the rows and/or columns of a contingency table.

The origin of matrix seriation is attributable to the British archaeologist Flinders Petrie [-@petrie1899], who successfully established an important chronology for ancient Egypt in 1899. Petrie's formulation of the method was in archaeological terms, devoid of any mathematical formalism. For this, we had to wait until the middle of the 20th century and the work of @brainerd1951 and @robinson1951, followed by the contributions of Kendall [-@kendall1969; -@kendall1969a]. Seriation is not unique to archaeology, and some of the crucial advances have been made in other disciplines, notably the work of @bertin1967 on graphic semiology and the work of @benzecri1973 on correspondence analysis.

The matrix seriation problem is based on archaeological conditions and statistical assumptions [@dunnell1970]. Theses assumptions create a distributional model and ordering is accomplished by arranging the matrix so that the class distributions approximate the required pattern. The resulting order is *inferred* to be chronological.

This post briefly illustrates how to perform a correspondence analysis based seriation with [**kairos**](https://packages.tesselle.org/kairos/), [**dimensio**](https://packages.tesselle.org/dimensio/) and [**tabula**](https://packages.tesselle.org/tabula/).

# Getting Started

To start off, you should install the `tesselle` packages, if you haven't already:

``` r
install.packages("tesselle")
```

Then, you need to load and attach the package:

```{webr-r}
library(tesselle)
```

Now we can use the functions from the `tesselle` packages.

# Case Study

In this post, we will be exploring the `zuni` dataset from @peeples2012. This dataset contains ceramic counts from the Zuni region of the American Southwest: each observation is an assemblage and each variable is a ceramic type (see `help(zuni, package = "folio")`).

```{webr-r}
## Load the zuni dataset
## Data from Peeples and Schachner 2012
data("zuni", package = "folio")
```

To get a graphical overview of the data, you can plot a @ford1962 (battleship curve) diagram:

```{webr-r}
#| label: fig-ford
#| fig-cap: "Ford diagram of the Zuni dataset."
#| fig-width: 7
#| fig-height: 7
#| out-width: 100%
## Plot the original matrix
plot_ford(zuni)
```

Correspondence Analysis (CA) is an effective method for the seriation of archaeological assemblages: the order of the rows and columns is given by the coordinates along one dimension of the CA space, assumed to account for temporal variation. Let's use the `seriate_average()` function:

```{webr-r}
#| label: seriate
indices <- seriate_average(
  object = zuni, 
  margin = c(1, 2), # Get row (1) and column (2) permutations
  axes = 1          # Use CA coordinates along the first axis
)
```

`seriate_average()` returns the full results of the correspondence analysis. You can explore these results:

```{webr-r}
#| label: fig-ca
#| fig-cap: "Row principal biplot of the CA results."
#| fig-width: 7
#| fig-height: 7
#| out-width: 100%
## CA biplot (get a nice arch effect!)
biplot(indices, type = "rows")
```

If the results of the correspondence analysis are satisfactory, we can then permute the rows and columns of the original data matrix:

```{webr-r}
#| label: permute
## Permute data matrix
permuted <- permute(zuni, indices)
```

Plot a Ford diagram of the permuted data:

```{webr-r}
#| label: fig-permute
#| fig-cap: "Ford diagram of the permuted dataset."
#| fig-width: 7
#| fig-height: 7
#| out-width: 100%
## Plot permuted matrix
par(mar = c(0, 0, 0, 0)+0.1)
plot_ford(permuted)
```

Note that the direction of temporal change within the correspondence analysis space is arbitrary: additional information is needed to determine the actual order in time.
