---
title: "dimensio 0.3.0"
subtitle: "Simple Principal Components Analysis and Correspondence Analysis"
slug: tesselle-dimensio-030
categories:
  - packages
  - releases
author:
  - name: Nicolas Frerebeau
    url: https://www.archaeo.science
    affiliation: Arch√©osciences Bordeaux (UMR 6034)
    affiliation_url: https://www.archeosciences-bordeaux.fr
    orcid: 0000-0001-5759-4944
date: 2022-08-15
image: preview.png
bibliography: [references.bib, packages.bib]
nocite: |
  @R-dimensio, @R-khroma, @R-ggrepel
---

[dimensio](https://packages.tesselle.org/dimensio/) 0.3.0 is now on [<abbr title="Comprehensive R Archive Network">CRAN</abbr>](https://cran.r-project.org/)! dimensio provides a set of tools to compute, extract, summarize and visualize results of Principal Components Analysis (PCA) and Correspondence Analysis (CA) based on the Singular Value Decomposition (SVD). It also includes methods for partial bootstrap validation.

There are many very good packages for multivariate data analysis (such as [FactoMineR](http://factominer.free.fr/), [ade4](https://pbil.univ-lyon1.fr/ade4/), [vegan](https://rpubs.com/brouwern/veganpca) or [ca](https://cran.r-project.org/package=ca), all extended by [FactoExtra](https://rpkgs.datanovia.com/factoextra/)). dimensio is designed to be as simple as possible, providing all the necessary tools to explore the results of the analysis.

You can install it from [<abbr title="Comprehensive R Archive Network">CRAN</abbr>](https://cran.r-project.org/) with:

```{r, eval=FALSE}
install.packages("dimensio")
```

```{r packages-load}
library(dimensio)

library(ggplot2)
library(ggrepel)
library(khroma)
```

This post highlights the basics of the package using the [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/) dataset [@R-palmerpenguins].

## Do PCA

```{r}
#| label: pca
## Load data
# install.packages("palmerpenguins")
data("penguins", package = "palmerpenguins")
head(penguins)

## Remove cases with missing values
penguins <- na.omit(penguins)

## Keep quantitative variables
## (i.e. column names ending with a unit)
end_with_unit <- grep("_mm|_g", colnames(penguins), value = TRUE)
quanti <- subset(penguins, select = end_with_unit)

## Compute PCA
## (non numeric variables are automatically removed)
X <- pca(quanti, center = TRUE, scale = TRUE)
```

## Explore the results

dimensio provides several methods to extract (`get_*()`) the results: 

* `get_data()` returns the original data.
* `get_contributions()` returns the contributions to the definition of the principal dimensions.
* `get_coordinates()` returns the principal or standard coordinates.
* `get_correlations()` returns the correlations between variables and dimensions.
* `get_cos2()` returns the cos^2^ values (i.e. the quality of the representation of the points on the factor map).
* `get_eigenvalues()` returns the eigenvalues, the percentages of variance and the cumulative percentages of variance.

The package also allows to quickly visualize (`plot_*()`) the results:

* `plot_rows()`/`plot_individuals()` displays row/individual principal coordinates.
* `plot_columns()`/`plot_variables()` displays columns/variable principal coordinates.
* `plot_contributions()` displays (joint) contributions. 
* `plot_cos2()` displays (joint) cos^2^.
* `plot_variance()` produces a scree plot.

dimensio uses [ggplot2](https://github.com/tidyverse/ggplot2) [@R-ggplot2] for plotting information. Visualization methods produce graphics with as few elements as possible: this makes it easy to customize diagrams (e.g. using extra layers, themes and scales).

```{r}
#| label: eigenvalues
## Get eigenvalues
get_eigenvalues(X)

## Scree plot
plot_variance(X) +
  ggplot2::geom_text(nudge_y = 2) + # Add labels
  ggplot2::theme_bw() # Change theme
```

```{r}
#| label: contributions
## Plot contribution of the variables to the definition of the first two axes
plot_contributions(X, margin = 2, axes = c(1, 2)) +
  ggplot2::geom_text(nudge_y = 2) +
  ggplot2::theme_bw()
```

## PCA biplot

A biplot is the simultaneous representation of rows and columns of a rectangular dataset. It is the generalization of a scatterplot to the case of mutlivariate data: it allows to visualize as much information as possible in a single graph [@greenacre2010].

dimensio allows to display two types of biplots: a *form biplot* (*row-metric-preserving* biplot) or a *covariance biplot* (*column-metric-preserving* biplot). See @greenacre2010 for more details about biplots.

The form biplot favors the representation of the individuals: the distance between the individuals approximates the Euclidean distance between rows. In the form biplot the length of a vector approximates the quality of the representation of the variable.

```{r}
#| label: biplot-rows
#| warning: false
biplot(X, type = "form", label = "variables") +
  ggrepel::geom_label_repel() + # Add repelling labels
  ggplot2::theme_bw() +
  ggplot2::theme(legend.position = "none") +
  khroma::scale_colour_highcontrast() # Custom color scale
```

The covariance biplot favors the representation of the variables: the length of a vector approximates the standard deviation of the variable and the cosine of the angle formed by two vectors approximates the correlation between the two variables [@greenacre2010]. In the covariance biplot the distance between the individuals approximates the Mahalanobis distance between rows.

```{r}
#| label: biplot-columns
#| fig-height: 7
#| warning: false
biplot(X, type = "covariance", label = "variables") +
  ggrepel::geom_label_repel() + # Add repelling labels
  ggplot2::theme_bw() +
  ggplot2::theme(legend.position = "none") +
  khroma::scale_colour_highcontrast() # Custom color scale
```

Biplots have the drawbacks of their advantages: they can quickly become difficult to read as they display a lot of information at once. It may then be preferable to visualize the results for individuals and variables separately.

## Plot PCA loadings

`plot_variables()` depicts the variables by rays emanating from the origin (both their lengths and directions are important to the interpretation).

```{r}
#| label: plot-var
## Plot variables factor map
plot_variables(X) +
  ggrepel::geom_label_repel() +
  ggplot2::theme_bw()
```

`plot_variables()` allows to highlight additional information by varying different graphical elements (color, transparency, shape and size of symbols...).

```{r}
#| label: plot-var-cos2
## Highlight cos2
plot_variables(X, colour = "cos2") +
  ggrepel::geom_label_repel() + 
  ggplot2::theme_bw() +
  khroma::scale_color_YlOrBr(range = c(0.4, 1))
```

## Plot PCA scores

`plot_individuals()` allows to display individuals and to highlight additional information.

```{r}
#| label: plot-ind-species
#| preview: true
## Plot individuals and colour by species
plot_individuals(X, colour = "group", group = penguins$species) +
  ggplot2::stat_ellipse() + # Add ellipses
  ggplot2::theme_bw() +
  khroma::scale_colour_bright(name = "Species")
```

```{r}
#| echo: false
ggplot2::ggsave("preview.png", width = 7, height = 5, units = "in")
```

```{r}
#| label: plot-ind-mass
## Highlight body masses
plot_individuals(X, colour = "group", group = penguins$body_mass_g) +
  ggplot2::theme_bw() +
  khroma::scale_color_YlOrBr(name = "Body mass (g)")
```

```{r}
#| label: plot-ind-contrib
## Highlight contributions
plot_individuals(X, colour = "contrib", size = "contrib") +
  ggplot2::theme_bw() + # Change theme
  ggplot2::scale_size_continuous(range = c(1, 5)) + # Custom size scale
  khroma::scale_color_iridescent()
```

## Custom plot

If you need more flexibility, the `get_*()` family and the `tidy()` and `augment()` functions allow you to extract the results as data frames and thus build custom graphs with base graphics or ggplot2.

```{r}
#| label: tidy
penguins_tidy <- tidy(X, margin = 2)
head(penguins_tidy)

ggplot2::ggplot(data = penguins_tidy) +
  ggplot2::aes(x = abs(coordinate), y = label, fill = coordinate > 0) +
  ggplot2::geom_col() +
  ggplot2::facet_wrap(. ~ component) +
  ggplot2::theme_bw() +
  ggplot2::theme(legend.position = "bottom") +
  khroma::scale_fill_vibrant(name = "Positive loadings?", reverse = TRUE)
```

```{r}
#| label: augment
penguins_augment <- augment(X, margin = 1)
head(penguins_augment)

ggplot2::ggplot(data = penguins_augment) +
  ggplot2::aes(x = F1, y = F2, colour = contribution) +
  ggplot2::geom_vline(xintercept = 0, size = 0.5, linetype = "dashed") +
  ggplot2::geom_hline(yintercept = 0, size = 0.5, linetype = "dashed") +
  ggplot2::geom_point() +
  ggplot2::coord_fixed() + # /!\
  ggplot2::theme_bw() +
  khroma::scale_color_iridescent()
```

```{r}
#| echo: false
knitr::write_bib(
  x = c("dimensio", "khroma", "ggplot2", "ggrepel", "palmerpenguins"),
  file = "packages.bib"
)
```
