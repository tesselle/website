{
  "hash": "e00aafe16d4aec9e07365050d06c049e",
  "result": {
    "markdown": "---\ntitle: \"dimensio 0.3.0\"\nsubtitle: \"Simple Principal Components Analysis and Correspondence Analysis\"\nslug: tesselle-dimensio-030\ncategories:\n  - packages\n  - releases\nauthor:\n  - name: Nicolas Frerebeau\n    url: https://www.archaeo.science\n    affiliation: Archéosciences Bordeaux (UMR 6034)\n    affiliation_url: https://www.archeosciences-bordeaux.fr\n    orcid: 0000-0001-5759-4944\ndate: 2022-08-15\nimage: preview.png\nbibliography: [references.bib, packages.bib]\nnocite: |\n  @R-dimensio, @R-khroma, @R-ggrepel\n---\n\n\n[dimensio](https://packages.tesselle.org/dimensio/) 0.3.0 is now on [<abbr title=\"Comprehensive R Archive Network\">CRAN</abbr>](https://cran.r-project.org/)! dimensio provides a set of tools to compute, extract, summarize and visualize results of Principal Components Analysis (PCA) and Correspondence Analysis (CA) based on the Singular Value Decomposition (SVD). It also includes methods for partial bootstrap validation.\n\nThere are many very good packages for multivariate data analysis (such as [FactoMineR](http://factominer.free.fr/), [ade4](https://pbil.univ-lyon1.fr/ade4/), [vegan](https://rpubs.com/brouwern/veganpca) or [ca](https://cran.r-project.org/package=ca), all extended by [FactoExtra](https://rpkgs.datanovia.com/factoextra/)). dimensio is designed to be as simple as possible, providing all the necessary tools to explore the results of the analysis.\n\nYou can install it from [<abbr title=\"Comprehensive R Archive Network\">CRAN</abbr>](https://cran.r-project.org/) with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"dimensio\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dimensio)\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(khroma)\n```\n:::\n\n\nThis post highlights the basics of the package using the [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/) dataset [@R-palmerpenguins].\n\n## Do PCA\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Load data\n# install.packages(\"palmerpenguins\")\ndata(\"penguins\", package = \"palmerpenguins\")\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n```\n:::\n\n```{.r .cell-code}\n## Remove cases with missing values\npenguins <- na.omit(penguins)\n\n## Keep quantitative variables\n## (i.e. column names ending with a unit)\nend_with_unit <- grep(\"_mm|_g\", colnames(penguins), value = TRUE)\nquanti <- subset(penguins, select = end_with_unit)\n\n## Compute PCA\n## (non numeric variables are automatically removed)\nX <- pca(quanti, center = TRUE, scale = TRUE)\n```\n:::\n\n\n## Explore the results\n\ndimensio provides several methods to extract (`get_*()`) the results: \n\n* `get_data()` returns the original data.\n* `get_contributions()` returns the contributions to the definition of the principal dimensions.\n* `get_coordinates()` returns the principal or standard coordinates.\n* `get_correlations()` returns the correlations between variables and dimensions.\n* `get_cos2()` returns the cos^2^ values (i.e. the quality of the representation of the points on the factor map).\n* `get_eigenvalues()` returns the eigenvalues, the percentages of variance and the cumulative percentages of variance.\n\nThe package also allows to quickly visualize (`plot_*()`) the results:\n\n* `plot_rows()`/`plot_individuals()` displays row/individual principal coordinates.\n* `plot_columns()`/`plot_variables()` displays columns/variable principal coordinates.\n* `plot_contributions()` displays (joint) contributions. \n* `plot_cos2()` displays (joint) cos^2^.\n* `plot_variance()` produces a scree plot.\n\ndimensio uses [ggplot2](https://github.com/tidyverse/ggplot2) [@R-ggplot2] for plotting information. Visualization methods produce graphics with as few elements as possible: this makes it easy to customize diagrams (e.g. using extra layers, themes and scales).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Get eigenvalues\nget_eigenvalues(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   eigenvalues  variance cumulative\nF1   2.7453557 70.536339   70.53634\nF2   0.7781172 19.992140   90.52848\nF3   0.3686425  9.471521  100.00000\n```\n:::\n\n```{.r .cell-code}\n## Scree plot\nplot_variance(X) +\n  ggplot2::geom_text(nudge_y = 2) + # Add labels\n  ggplot2::theme_bw() # Change theme\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/eigenvalues-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Plot contribution of the variables to the definition of the first two axes\nplot_contributions(X, margin = 2, axes = c(1, 2)) +\n  ggplot2::geom_text(nudge_y = 2) +\n  ggplot2::theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/contributions-1.png){width=672}\n:::\n:::\n\n\n## PCA biplot\n\nA biplot is the simultaneous representation of rows and columns of a rectangular dataset. It is the generalization of a scatterplot to the case of mutlivariate data: it allows to visualize as much information as possible in a single graph [@greenacre2010].\n\ndimensio allows to display two types of biplots: a *form biplot* (*row-metric-preserving* biplot) or a *covariance biplot* (*column-metric-preserving* biplot). See @greenacre2010 for more details about biplots.\n\nThe form biplot favors the representation of the individuals: the distance between the individuals approximates the Euclidean distance between rows. In the form biplot the length of a vector approximates the quality of the representation of the variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiplot(X, type = \"form\", label = \"variables\") +\n  ggrepel::geom_label_repel() + # Add repelling labels\n  ggplot2::theme_bw() +\n  ggplot2::theme(legend.position = \"none\") +\n  khroma::scale_colour_highcontrast() # Custom color scale\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/biplot-rows-1.png){width=672}\n:::\n:::\n\n\nThe covariance biplot favors the representation of the variables: the length of a vector approximates the standard deviation of the variable and the cosine of the angle formed by two vectors approximates the correlation between the two variables [@greenacre2010]. In the covariance biplot the distance between the individuals approximates the Mahalanobis distance between rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiplot(X, type = \"covariance\", label = \"variables\") +\n  ggrepel::geom_label_repel() + # Add repelling labels\n  ggplot2::theme_bw() +\n  ggplot2::theme(legend.position = \"none\") +\n  khroma::scale_colour_highcontrast() # Custom color scale\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/biplot-columns-1.png){width=672}\n:::\n:::\n\n\nBiplots have the drawbacks of their advantages: they can quickly become difficult to read as they display a lot of information at once. It may then be preferable to visualize the results for individuals and variables separately.\n\n## Plot PCA loadings\n\n`plot_variables()` depicts the variables by rays emanating from the origin (both their lengths and directions are important to the interpretation).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Plot variables factor map\nplot_variables(X) +\n  ggrepel::geom_label_repel() +\n  ggplot2::theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-var-1.png){width=672}\n:::\n:::\n\n\n`plot_variables()` allows to highlight additional information by varying different graphical elements (color, transparency, shape and size of symbols...).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Highlight cos2\nplot_variables(X, colour = \"cos2\") +\n  ggrepel::geom_label_repel() + \n  ggplot2::theme_bw() +\n  khroma::scale_color_YlOrBr(range = c(0.4, 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-var-cos2-1.png){width=672}\n:::\n:::\n\n\n## Plot PCA scores\n\n`plot_individuals()` allows to display individuals and to highlight additional information.\n\n\n::: {.cell preview='true'}\n\n```{.r .cell-code}\n## Plot individuals and colour by species\nplot_individuals(X, colour = \"group\", group = penguins$species) +\n  ggplot2::stat_ellipse() + # Add ellipses\n  ggplot2::theme_bw() +\n  khroma::scale_colour_bright(name = \"Species\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-ind-species-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Highlight body masses\nplot_individuals(X, colour = \"group\", group = penguins$body_mass_g) +\n  ggplot2::theme_bw() +\n  khroma::scale_color_YlOrBr(name = \"Body mass (g)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-ind-mass-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Highlight contributions\nplot_individuals(X, colour = \"contrib\", size = \"contrib\") +\n  ggplot2::theme_bw() + # Change theme\n  ggplot2::scale_size_continuous(range = c(1, 5)) + # Custom size scale\n  khroma::scale_color_iridescent()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-ind-contrib-1.png){width=672}\n:::\n:::\n\n\n## Custom plot\n\nIf you need more flexibility, the `get_*()` family and the `tidy()` and `augment()` functions allow you to extract the results as data frames and thus build custom graphs with base graphics or ggplot2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_tidy <- tidy(X, margin = 2)\nhead(penguins_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           label component supplementary coordinate contribution      cos2\n1  bill_depth_mm        F1         FALSE -0.6611860     15.92387 0.4371669\n2  bill_depth_mm        F2         FALSE  0.7023087     63.38859 0.4932375\n3  bill_depth_mm        F3         FALSE  0.2585287     18.13060 0.0668371\n4 bill_length_mm        F1         FALSE  0.7518288     20.58919 0.5652466\n5 bill_length_mm        F2         FALSE  0.5294376     36.02339 0.2803042\n6 bill_length_mm        F3         FALSE -0.3900969     41.27999 0.1521756\n```\n:::\n\n```{.r .cell-code}\nggplot2::ggplot(data = penguins_tidy) +\n  ggplot2::aes(x = abs(coordinate), y = label, fill = coordinate > 0) +\n  ggplot2::geom_col() +\n  ggplot2::facet_wrap(. ~ component) +\n  ggplot2::theme_bw() +\n  ggplot2::theme(legend.position = \"bottom\") +\n  khroma::scale_fill_vibrant(name = \"Positive loadings?\", reverse = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tidy-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_augment <- augment(X, margin = 1)\nhead(penguins_augment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         F1          F2 label supplementary        mass      sum contribution\n1 -1.853593  0.03206938     1         FALSE 0.003003003 3.436836    1.0320827\n2 -1.316254 -0.44352677     2         FALSE 0.003003003 1.929241    0.5793516\n3 -1.376605 -0.16123048     3         FALSE 0.003003003 1.921037    0.5768879\n4 -1.885288 -0.01235124     4         FALSE 0.003003003 3.554465    1.0674069\n5 -1.919981  0.81759813     5         FALSE 0.003003003 4.354793    1.3077456\n6 -1.773020 -0.36622296     6         FALSE 0.003003003 3.277720    0.9843004\n       cos2\n1 0.9113332\n2 0.9224728\n3 0.8589470\n4 0.8516598\n5 0.8914904\n6 0.9275007\n```\n:::\n\n```{.r .cell-code}\nggplot2::ggplot(data = penguins_augment) +\n  ggplot2::aes(x = F1, y = F2, colour = contribution) +\n  ggplot2::geom_vline(xintercept = 0, size = 0.5, linetype = \"dashed\") +\n  ggplot2::geom_hline(yintercept = 0, size = 0.5, linetype = \"dashed\") +\n  ggplot2::geom_point() +\n  ggplot2::coord_fixed() + # /!\\\n  ggplot2::theme_bw() +\n  khroma::scale_color_iridescent()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/augment-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}